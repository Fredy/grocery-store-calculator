{"version":3,"sources":["common/mock.tsx","common/utils.tsx","contexts/GroceryStoreContext.tsx","components/ProductList/index.tsx","components/Autocomplete/index.tsx","containers/Calculator/index.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["PRODUCT_DATA","name","price","uniqueId","salePrice","quantity","newPrice","KEYED_PRODUCT_DATA","Object","fromEntries","map","p","moneyFormatter","Intl","NumberFormat","style","currency","calculateItemPrice","key","singlePrice","withSalePrice","Math","floor","withoutSalePrice","GroceryStoreContext","createContext","undefined","GroceryStoreProvider","children","useState","Map","productsMap","setProductsMap","totalPrice","setTotalPrice","savings","setSavings","useEffect","withoutDiscountPrice","forEach","increaseProductItem","useCallback","old","newMap","get","set","decreaseProductItem","delete","removeProductItem","contextValue","Provider","value","useGroceryStoreContext","useContext","ProductItem","product","formattedPrice","format","className","onClick","size","color","ProductList","Array","from","renderSuggestion","prod","Autocomplete","onSelectValue","getSuggestions","setValue","suggestions","setSuggestions","inputProps","placeholder","onChange","_","newValue","onSuggestionsFetchRequested","onSuggestionsClearRequested","onSuggestionSelected","suggestion","getSuggestionValue","inputValue","trim","toLowerCase","filter","includes","Calculator","formattedTotalPrice","formatterSavings","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.4527f566.chunk.js","sourcesContent":["import { ProductData } from './types';\n\nexport const PRODUCT_DATA: ProductData[] = [\n  {\n    name: 'Milk',\n    price: 3.97,\n    uniqueId: 'milk',\n    salePrice: { quantity: 2, newPrice: 5 },\n  },\n  {\n    name: 'Bread',\n    price: 2.17,\n    uniqueId: 'bread',\n    salePrice: { quantity: 3, newPrice: 6 },\n  },\n  {\n    name: 'Banana',\n    price: 0.99,\n    uniqueId: 'banana',\n    salePrice: null,\n  },\n  {\n    name: 'Apple',\n    price: 0.89,\n    uniqueId: 'apple',\n    salePrice: null,\n  },\n];\n\nexport const KEYED_PRODUCT_DATA = Object.fromEntries(\n  PRODUCT_DATA.map((p) => [p.uniqueId, p])\n);\n","import { ProductUniqueKey } from './types';\nimport { KEYED_PRODUCT_DATA } from './mock';\n\nexport const moneyFormatter = new Intl.NumberFormat('en-US', {\n  style: 'currency',\n  currency: 'USD',\n});\n\nexport function calculateItemPrice(key: ProductUniqueKey, quantity: number) {\n  const { price: singlePrice, salePrice } = KEYED_PRODUCT_DATA[key];\n  if (!salePrice) {\n    return quantity * singlePrice;\n  }\n\n  const withSalePrice = Math.floor(quantity / salePrice.quantity);\n  const withoutSalePrice = quantity % salePrice.quantity;\n  return withSalePrice * salePrice.newPrice + withoutSalePrice * singlePrice;\n}\n","import React, {\n  createContext,\n  useCallback,\n  useContext,\n  useEffect,\n  useState,\n} from 'react';\n\nimport { ProductItemsMap, ProductUniqueKey } from 'common/types';\nimport { KEYED_PRODUCT_DATA } from 'common/mock';\nimport { calculateItemPrice } from 'common/utils';\n\ninterface Props {\n  children: React.ReactNode;\n}\n\ninterface ContextValue {\n  productsMap: ProductItemsMap;\n  totalPrice: number;\n  savings: number;\n  increaseProductItem: (key: ProductUniqueKey) => void;\n  decreaseProductItem: (key: ProductUniqueKey) => void;\n  removeProductItem: (key: ProductUniqueKey) => void;\n}\n\nconst GroceryStoreContext = createContext<ContextValue>(undefined as any);\n\nexport function GroceryStoreProvider({ children }: Props) {\n  const [productsMap, setProductsMap] = useState<ProductItemsMap>(new Map());\n  const [totalPrice, setTotalPrice] = useState(0);\n  const [savings, setSavings] = useState(0);\n\n  useEffect(() => {\n    let newPrice = 0;\n    let withoutDiscountPrice = 0;\n    productsMap.forEach((quantity, key) => {\n      const { price: singlePrice } = KEYED_PRODUCT_DATA[key];\n      withoutDiscountPrice += quantity * singlePrice;\n      newPrice += calculateItemPrice(key, quantity);\n    });\n    setTotalPrice(newPrice);\n    setSavings(withoutDiscountPrice - newPrice);\n  }, [productsMap]);\n\n  const increaseProductItem = useCallback((key: ProductUniqueKey) => {\n    setProductsMap((old) => {\n      const newMap = new Map(old);\n      const quantity = old.get(key);\n      if (quantity === undefined) {\n        newMap.set(key, 1);\n      } else {\n        newMap.set(key, quantity + 1);\n      }\n      return newMap;\n    });\n  }, []);\n\n  const decreaseProductItem = useCallback((key: ProductUniqueKey) => {\n    setProductsMap((old) => {\n      const newMap = new Map(old);\n      const quantity = old.get(key);\n      if (quantity === undefined) {\n        return old;\n      }\n      if (quantity === 1) {\n        newMap.delete(key);\n      } else {\n        newMap.set(key, quantity - 1);\n      }\n      return newMap;\n    });\n  }, []);\n\n  const removeProductItem = useCallback((key: ProductUniqueKey) => {\n    setProductsMap((old) => {\n      const newMap = new Map(old);\n      const hasDeleted = newMap.delete(key);\n      if (hasDeleted) {\n        return newMap;\n      }\n      return old;\n    });\n  }, []);\n\n  const contextValue: ContextValue = {\n    productsMap,\n    totalPrice,\n    savings,\n    increaseProductItem,\n    decreaseProductItem,\n    removeProductItem,\n  };\n\n  return (\n    <GroceryStoreContext.Provider value={contextValue}>\n      {children}\n    </GroceryStoreContext.Provider>\n  );\n}\n\nexport function useGroceryStoreContext() {\n  return useContext(GroceryStoreContext);\n}\n","import React from 'react';\nimport { MdDeleteOutline, MdOutlineAdd, MdOutlineRemove } from 'react-icons/md';\n\nimport './styles.css';\nimport { calculateItemPrice, moneyFormatter } from 'common/utils';\nimport { ProductData } from 'common/types';\nimport { KEYED_PRODUCT_DATA } from 'common/mock';\nimport { useGroceryStoreContext } from 'contexts/GroceryStoreContext';\n\ninterface ProductItemProps {\n  product: ProductData;\n  quantity: number;\n}\n\nfunction ProductItem({ product, quantity }: ProductItemProps) {\n  const { increaseProductItem, decreaseProductItem, removeProductItem } =\n    useGroceryStoreContext();\n  const { uniqueId, name } = product;\n  const formattedPrice = moneyFormatter.format(\n    calculateItemPrice(uniqueId, quantity)\n  );\n\n  const handleIncrease = () => {\n    increaseProductItem(uniqueId);\n  };\n\n  const handleDecrease = () => {\n    decreaseProductItem(uniqueId);\n  };\n\n  const handleRemove = () => {\n    removeProductItem(uniqueId);\n  };\n\n  return (\n    <li className=\"productList-item\">\n      <div className=\"productList-item-description\">\n        <span className=\"productList-item-name\">{name}</span>\n\n        <span className=\"productList-item-quantity\">x{quantity}</span>\n      </div>\n\n      <div className=\"productList-item-buttonGroup\">\n        <button onClick={handleDecrease} className=\"productList-item-button\">\n          <MdOutlineRemove size={20} />\n        </button>\n        <button onClick={handleIncrease} className=\"productList-item-button\">\n          <MdOutlineAdd size={20} />\n        </button>\n      </div>\n\n      <span className=\"productList-item-price\">{formattedPrice}</span>\n      <button onClick={handleRemove} className=\"productList-item-button\">\n        <MdDeleteOutline color=\"red\" size={20} />\n      </button>\n    </li>\n  );\n}\n\nfunction ProductList() {\n  const { productsMap } = useGroceryStoreContext();\n\n  return (\n    <ul className=\"productList-container\">\n      {Array.from(productsMap).map(([key, quantity]) => (\n        <ProductItem\n          product={KEYED_PRODUCT_DATA[key]}\n          quantity={quantity}\n          key={key}\n        />\n      ))}\n    </ul>\n  );\n}\n\nexport default ProductList;\n","import React, { useState } from 'react';\nimport Autosuggest, {\n  ChangeEvent,\n  SuggestionSelectedEventData,\n  SuggestionsFetchRequestedParams,\n} from 'react-autosuggest';\n\nimport './styles.css';\nimport { ProductData } from 'common/types';\n\ninterface AutocompleteProps {\n  onSelectValue: (prod: ProductData) => void;\n  getSuggestions: (value: string) => ProductData[];\n}\n\nfunction renderSuggestion(prod: ProductData) {\n  return <div>{prod.name}</div>;\n}\n\nfunction Autocomplete({ onSelectValue, getSuggestions }: AutocompleteProps) {\n  const [value, setValue] = useState('');\n  const [suggestions, setSuggestions] = useState<ProductData[]>([]);\n\n  const onSuggestionsFetchRequested = ({\n    value,\n  }: SuggestionsFetchRequestedParams) => {\n    setSuggestions(getSuggestions(value));\n  };\n\n  const onChange = (_: any, { newValue }: ChangeEvent) => {\n    setValue(newValue);\n  };\n\n  const handleSuggestionSelected = (\n    _: any,\n    { suggestion }: SuggestionSelectedEventData<ProductData>\n  ) => {\n    onSelectValue(suggestion);\n    setValue('');\n  };\n\n  const inputProps = {\n    placeholder: 'Enter item name',\n    value,\n    onChange,\n  };\n\n  return (\n    <Autosuggest\n      suggestions={suggestions}\n      onSuggestionsFetchRequested={onSuggestionsFetchRequested}\n      onSuggestionsClearRequested={() => setSuggestions([])}\n      onSuggestionSelected={handleSuggestionSelected}\n      getSuggestionValue={(prod: ProductData) => prod.name}\n      renderSuggestion={renderSuggestion}\n      inputProps={inputProps}\n    />\n  );\n}\n\nexport default Autocomplete;\n","import React from 'react';\n\nimport './styles.css';\nimport ProductList from 'components/ProductList';\nimport Autocomplete from 'components/Autocomplete';\nimport { PRODUCT_DATA } from 'common/mock';\nimport { ProductData } from 'common/types';\nimport { moneyFormatter } from 'common/utils';\nimport { useGroceryStoreContext } from 'contexts/GroceryStoreContext';\n\nfunction getSuggestions(value: string) {\n  const inputValue = value.trim().toLowerCase();\n\n  return inputValue\n    ? PRODUCT_DATA.filter((prod) =>\n        prod.name.toLowerCase().includes(inputValue)\n      )\n    : [];\n}\n\nfunction Calculator() {\n  const { increaseProductItem, totalPrice, savings } = useGroceryStoreContext();\n\n  const formattedTotalPrice = moneyFormatter.format(totalPrice);\n  const formatterSavings = moneyFormatter.format(savings);\n\n  const handleSelectValue = (prod: ProductData) => {\n    increaseProductItem(prod.uniqueId);\n  };\n\n  return (\n    <div className=\"calculator-container\">\n      <div className=\"calculator-column calculator-leftSide\">\n        <ProductList />\n        <Autocomplete\n          getSuggestions={getSuggestions}\n          onSelectValue={handleSelectValue}\n        />\n      </div>\n      <div className=\"calculator-column calculator-rightSide\">\n        <div className=\"calculator-totalPrice\">\n          <h1>Total price</h1>\n          <h2>{formattedTotalPrice}</h2>\n        </div>\n        <div className=\"calculator-savedAmount\">\n          <h1>You saved</h1>\n          <h2>{formatterSavings}</h2>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default Calculator;\n","import React from 'react';\n\nimport './App.css';\nimport Calculator from 'containers/Calculator';\nimport { GroceryStoreProvider } from 'contexts/GroceryStoreContext';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <GroceryStoreProvider>\n        <Calculator />\n      </GroceryStoreProvider>\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}